#pragma kernel CSMain

#include "Assets/Shaders/Includes/Dissolver.cginc"

// inputs

StructuredBuffer<int> TrianglesBuffer;
StructuredBuffer<float3> VerticesBuffer;
StructuredBuffer<float2> UvBuffer;
Texture2D<float4> DissolveMap;
float DissolveRate;
float EdgeFadeIn;
float EdgeIn;
float EdgeOut;
float EdgeFadeOut;
float4x4 Transform;
uint TrianglesCount;
uint DissolveMapWidth;
uint DissolveMapHeight;
uint DestMapWidth;
uint DestMapHeight;
float DissolveThreshold;
float Time;

// outputs

RWTexture2D<float4> PositionMap;
RWTexture2D<float4> NormalMap;
RWTexture2D<float4> AlphaMap;

// ref:
// https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
float Random (float2 st) {
    return frac(sin(dot(st.xy,
                         float2(12.9898,78.233)))*
        43758.5453123);
}

float3 CalcNormal (float3 v1, float3 v2, float3 v3) {
    return normalize(cross(v2 - v1, v3 - v1));
}

[numthreads(1,1,1)]
void CSMain (uint2 id : SV_DispatchThreadID)
{
    float idx = (float)id.x + Time;
    float idy = (float)id.y + Time;

    // random sampling
    uint targetIndex = (uint)(Random(float2(idx, idy)) * TrianglesCount);

    int i1 = TrianglesBuffer[targetIndex * 3];
    int i2 = TrianglesBuffer[targetIndex * 3 + 1];
    int i3 = TrianglesBuffer[targetIndex * 3 + 2];

    float3 v1 = VerticesBuffer[i1];
    float3 v2 = VerticesBuffer[i2];
    float3 v3 = VerticesBuffer[i3];

    float2 uv1 = UvBuffer[i1];
    float2 uv2 = UvBuffer[i2];
    float2 uv3 = UvBuffer[i3];

    // manually random seed
    float weight1 = lerp(
        0,
        1,
        Random(float2((float)targetIndex + Time + 1, (float)targetIndex + Time + 2))
    );
    float weight2 = lerp(
        0,
        1 - weight1,
        Random(float2((float)targetIndex + Time + 3, (float)targetIndex + Time + 4))
    );
    float weight3 = 1 - (weight1 + weight2);

    // float weight1 = 0.333;
    // float weight2 = 0.333;
    // float weight3 = 0.333;

    float2 uv =
        uv1 * weight1 +
        uv2 * weight2 +
        uv3 * weight3;

    float4 lp1 = float4(v1.x, v1.y, v1.z, 1);
    float4 lp2 = float4(v2.x, v2.y, v2.z, 1);
    float4 lp3 = float4(v3.x, v3.y, v3.z, 1);
    float4 wp1 = mul(Transform, lp1);
    float4 wp2 = mul(Transform, lp2);
    float4 wp3 = mul(Transform, lp3);

    float4 wp =
        wp1 * weight1 +
        wp2 * weight2 +
        wp3 * weight3;

    // TODO: calc real normal
    // float3 wn = CalcNormal(wp1 * weight1, wp2 * weight2, wp3 * weight3);

    // fake normal
    float3 wn = CalcNormal(wp1.xyz, wp2.xyz, wp3.xyz);
    wn = (wn * 0.5) + 0.5; // -1 ~ 1 => 0 ~ 1

    float4 dissolveMapValue = DissolveMap[uint2(
        (uint)(uv.x * DissolveMapWidth),
        (uint)(uv.y * DissolveMapHeight)
    )];

    Dissolver o = dissolver(
        dissolveMapValue.x,
        DissolveRate,
        EdgeFadeIn,
        EdgeIn,
        EdgeOut,
        EdgeFadeOut
    );

    float alpha = clamp(sign(o.DissolveEdge - DissolveThreshold), 0, 1);

    // -----------------------------------------------------------------------
    // テクスチャに書き込み
    // -----------------------------------------------------------------------

    PositionMap[id] = float4(wp.x, wp.y, wp.z, 1);

    NormalMap[id] = float4(wn.x, wn.y, wn.z, 1);

    AlphaMap[id] = float4(alpha, alpha, alpha, alpha);
}
